
!**************************************************************
! Author: Patrick Brockmann
! Contact: Patrick.Brockmann@ipsl.jussieu.fr
! History:
! Modification:
!
!**************************************************************

set memory/size=20

!************************************************************
def sym title=$1
def sym file1=$2
def sym variable1=$3
def sym file2=$4
def sym variable2=$5
def sym qualifiers=/nolab/pal=grads/title=""$6% %
def sym qualifiersdiff=/nolab/pal=grads/title=""$7% %
def sym limits=$8%XXXXX%

def sym polygonfile1=earth_continents
def sym polygonfile2=earth_continents
def sym polygonfilediff=earth_continents

!------------------------
! calclimits is used to bypass the fact that
! ferret will not computed the same result for complete domain
! in expressions var[x=@ave,y=@ave] and var[x=0:450@ave,y=-90:90@ave]
! Note that yes? list var[x=20:60@ave,y=30:60@ave] and 
!           yes? let var1=var[x=20:60,y=30:60]; list var1[x=@ave,y=@ave]
! will not give the same result because the 2nd expression use for weight 
! all the complete surface cells. On the contrary, the 1st expression compute
! a weight considering cell splitting. 
!------------------------
if ($limits%|XXXXX>true|*>false|%) then
        def sym viewlimits=[x=0:450,y=-90:90]
        ppl set calclimits
else
        def sym viewlimits=($limits)
        def sym calclimits=($limits)
endif
!------------------------

!************************************************************
let variable1=($variable1)
let variable1_view=variable1($viewlimits)
let variable1_calc=variable1($calclimits)
go symbol_basename_and_define basefile1 "($file1)"
let variable2=($variable2)
let variable2_view=variable2($viewlimits)
let variable2_calc=variable2($calclimits)
go symbol_basename_and_define basefile2 "($file2)"

def sym method=fill  

go page_new -i 1 3 0 100 0 90 

set v 1 
use "($file1)"
go margins_set 20 20 20 20
($method)($qualifiers) variable1_view
go cont_cylin 0 /over/nolab " " ($polygonfile1)
go text_put 5 90 "@AS($basefile1): ($variable1)" -1 0.35
go text_stat3_put 50 5 variable1_calc 0 

def grid/x=variable1/y=variable1 gridvar1

set v 2 
use "($file2)"
go margins_set 20 20 20 20
($method)($qualifiers) variable2_view
go cont_cylin 0 /over/nolab " " ($polygonfile2)
go text_put 5 90 "@AS($basefile2): ($variable2)" -1 0.35
go text_stat3_put 50 5 variable2_calc 0 

set v 3 
let variable2_regridded=variable2[g=gridvar1]
let diff=variable1[d=($basefile1)]-variable2_regridded
let diff_view=diff($viewlimits)
let diff_calc=diff($calclimits)
go margins_set 20 20 20 20
($method)($qualifiersdiff) diff_view
go cont_cylin 0 /over/nolab " " ($polygonfilediff)
go text_put 5 90 "@ASDifference: ($variable1) - ($variable2)" -1 0.35
go text_stat3_put 50 5 diff_calc 0 

go logo_put ipsl

go textlayer_new
go textlayer_text_put 5 95 "@AS($title)" -1 0.5

