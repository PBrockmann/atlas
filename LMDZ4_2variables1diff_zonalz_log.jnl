
!**************************************************************
! Author: Patrick Brockmann
! Contact: Patrick.Brockmann@cea.fr
! $Date: 2011/09/12 12:17:41 $
! $Name: ATLAS_672_1_1 $
! $Revision: 1.1.1.1 $
! History:
! Modification:
!
!**************************************************************

set memory/size=20

!************************************************************
def sym title=($01)
def sym file1=($02)
def sym variable1=($03)
def sym file2=($04)
def sym variable2=($05)
def sym qualifiers=/hlim=-90:90:15/nolab/title=""($06% %)
def sym qualifiersdiff=/hlim=-90:90:15/nolab/title=""/pal=fast_002_rev.spk($07% %)
def sym method=($08%fill%)
def sym vmin=($09%0.1%) 
def sym vmax=($10%1000%) 

!************************************************************
let variable1=($variable1)
let variable2=($variable2)

go page_new -i 1 3 0 100 0 90

!------------------------
use "($file1)"
go symbol_basename_and_define basefile1 "($file1)"
def sym variable1_lstart=`variable1,return=lstart`
def sym variable1_lend=`variable1,return=lend`
if `($variable1_lstart) ne ($variable1_lend)` then
   say "Variable1 must have a time dimension equals to 1"
   exit
endif

let pressure1=pres[l=($variable1_lstart),d=($basefile1)]/100

def sym variable1_ksize=`variable1,return=ksize`
if `($variable1_ksize) eq 39 or ($variable1_ksize) eq 59 or ($variable1_ksize) eq 79` then
        ! LMDZ 39 levels or LMDZ 59/79 levels set to 50 levels from ECMWF
	def sym pressurelevelsfile=ECMWF50_stdpressurelevels.nc
	use ($pressurelevelsfile)
	let variable1z = ZAXREPLACE(variable1[d=1],pressure1[d=1],Z[GZ=ECMWF50_LEVELS])
	define axis/from_data/z/depth/units="mb"/edges myzlog=log(ZBOXLO[GZ=ECMWF50_LEVELS])
elif `($variable1_ksize) eq 19` then
	! LMDZ 19 levels set to 17 levels 
	def sym pressurelevelsfile=LMDZ_stdpressurelevels.nc
	use ($pressurelevelsfile)
	let variable1z = ZAXREPLACE(variable1[d=1],pressure1[d=1],Z[GZ=LMDZ_stdpressurelevels])
	define axis/from_data/z/depth/units="mb"/edges myzlog=log(ZBOXLO[GZ=LMDZ_stdpressurelevels])
else
	exit
endif

let variable1z_log=variable1z[gz=myzlog@asn]

!------------------------
set v 1
go margins_set 20 10 08 10 
($method)($qualifiers)/axes=(1,1,0,0)/vlim=`log(($vmin))`:`log(($vmax))` variable1z_log[i=@ave]
go text_put 2 95 "@AS($basefile1)" -1 0.35
go text_put 5 90 "@AS($variable1)" -1 0.35
go text_stat2_put 90 85 variable1z[i=@ave] 1 0.25 

!------------------------
def view/xlim=0.,1./ylim=0.6,0.9/text=0.55 label1 
set v label1
go margins_set 20 10 08 10 
plot/nolab/vlog/axes=(0,0,1,1)/vlim=($vmin):($vmax) z[g=variable1z]*0-1E34

!------------------------
def grid/x=variable1z/y=variable1z/z=variable1z gridvar1
show grid gridvar1

!------------------------
set v 2 
use "($file2)"
go symbol_basename_and_define basefile2 "($file2)"

go margins_set 20 10 08 10
let variable2z=variable2[g=gridvar1]
let variable2z_log=variable2z[gz=myzlog@asn]
($method)($qualifiers)/axes=(1,1,0,0)/vlim=`log(($vmin))`:`log(($vmax))` variable2z_log[i=@ave]
go text_put 2 95 "@AS($basefile2)" -1 0.35
go text_put 5 90 "@AS($variable2)" -1 0.35
go text_stat2_put 90 85 variable2[i=@ave] 1 0.25 

!------------------------
def view/xlim=0.,1./ylim=0.3,0.6/text=0.55 label2 
set v label2
go margins_set 20 10 08 10 
plot/nolab/vlog/axes=(0,0,1,1)/vlim=($vmin):($vmax) z[g=variable1z]*0-1E34

!------------------------
set v 3 
let diff=variable1z_log[d=($basefile1)]-variable2z_log[d=($basefile2)]
go margins_set 20 10 08 10
($method)($qualifiersdiff)/axes=(1,1,0,0)/vlim=`log(($vmin))`:`log(($vmax))` diff[i=@ave]
go text_put 2 95 "@ASDifference" -1 0.35
go text_put 5 90 "@AS($variable1) - ($variable2)" -1 0.35
go text_stat2_put 90 85 diff[i=@ave] 1 0.25 

!------------------------
def view/xlim=0.,1./ylim=0.0,0.3/text=0.55 label3 
set v label3
go margins_set 20 10 08 10 
plot/nolab/vlog/axes=(0,0,1,1)/vlim=($vmin):($vmax) z[g=variable1z]*0-1E34

!------------------------
go logo_put ipsl

go textlayer_new
go textlayer_text_put 2 95 "@AS($title)" -1 0.37

!------------------------
cancel data/all
cancel var/all

